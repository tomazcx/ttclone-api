// This is your Prisma schema filek
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  user         String   @unique
  password     String
  image        String?
  banner       String?
  localization String?
  desc         String?
  url          String?
  created_at   DateTime

  followedBy UserFollowers[] @relation("followed_by")
  following  UserFollowers[] @relation("follower")

  tweets          Tweet[]           @relation("tweetedBy")
  likedTweets     UsersLikes[]      @relation("liked_by")
  savedTweets     UserSavedTweets[] @relation("saved_by")
  tweetsRetweeted UserRetweets[]    @relation("retweeted_by")

  @@map("users")
}

model UserFollowers {
  id         String   @id @default(uuid())
  userId     String
  followerId String
  created_at DateTime

  user     User @relation("followed_by", fields: [userId], references: [id])
  follower User @relation("follower", fields: [followerId], references: [id])

  @@map("user_followers")
}

model UserSavedTweets {
  id         String   @id @default(uuid())
  userId     String
  tweetId    String
  created_at DateTime

  user       User  @relation("saved_by", fields: [userId], references: [id])
  savedTweet Tweet @relation("saved_by", fields: [tweetId], references: [id])

  @@map("user_saved_tweets")
}

model UserRetweets {
  id         String   @id @default(uuid())
  userId     String
  tweetId    String
  content    String?  @db.VarChar(280)
  created_at DateTime

  user       User  @relation("retweeted_by", fields: [userId], references: [id])
  savedTweet Tweet @relation("retweeted_by", fields: [tweetId], references: [id])

  @@map("users_retweets")
}

model UsersLikes {
  id         String   @id @default(uuid())
  userId     String
  tweetId    String
  created_at DateTime

  user  User  @relation("liked_by", fields: [userId], references: [id])
  tweet Tweet @relation("liked_by", fields: [tweetId], references: [id])
}

model Tweet {
  id         String   @id @default(uuid())
  authorId   String
  content    String   @db.VarChar(280)
  replyId    String?  @unique
  created_at DateTime

  repliesTo Tweet?  @relation("replies_to", fields: [replyId], references: [id])
  replies   Tweet[] @relation("replies_to")

  author            User              @relation("tweetedBy", fields: [authorId], references: [id])
  usersWhoLiked     UsersLikes[]      @relation("liked_by")
  usersWhoSaved     UserSavedTweets[] @relation("saved_by")
  usersWhoRetweeted UserRetweets[]    @relation("retweeted_by")

  @@map("tweets")
}
